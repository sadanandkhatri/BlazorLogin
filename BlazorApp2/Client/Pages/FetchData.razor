@page "/fetchdata"
@using BlazorApp2.Shared
@using Blazored.Toast.Configuration
@inject HttpClient Http
@inject IToastService toastService
@inject IModalService modal


<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>
<div class="form-inline">
    <label class="sr-only" for="filter-name">Search</label>
    <input type="text" class="form-control mb-2 mr-sm-2" placeholder="Search" @bind="searchfilter" />
    <button type="button" class="btn btn-primary mr-sm-2 mb-2" @onclick="Filter">Search</button>
    <button type="button" class="btn btn-danger mb-2" @onclick="Clear">Clear</button>
</div>

<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }
    .blazored-modal {
        height: auto;
        border: solid;
        border-color: black;
    }
    .blazored-modal-header{
        align-content:center;
    }
    .blazored-modal-title {
        align-content: center;
        text-align: center
    }
</style>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th class="sort-th" @onclick="@(() => SortTable("Date"))">Date</th>
                <th class="sort-th" @onclick="@(() => SortTable("TemperatureC"))">Temp. (C)</th>
                <th class="sort-th" @onclick="@(() => SortTable("TemperatureF"))">Temp. (F)</th>
                <th class="sort-th" @onclick="@(() => SortTable("Summary"))">Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in filterdata)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>

                        @if (forecast.Summary.Length > 10)
                        {
                            @for (int i = 0; i <= 10; i++)
                            {
                                @forecast.Summary[i];
                            }
                            <button class="small" style="font:100"
                                    @onclick="@(()=>showSummary(forecast.Id))">
                                more
                            </button>
                        }
                        else
                        {
                            @forecast.Summary
                        }
                    </td>
                    
                </tr>
            }
        </tbody>
    </table>
    <div class="pagination">
        <button class="btn btn-custom" @onclick=@( ()=> NavigateToPage("previous"))>Prev</button>
        @for (int i = startPage; i <= endPage; i++)
        {
            var currentPage = i;
            <button class="btn btn-custom pagebutton @(currentPage==curPage?"btn-danger":"")" @onclick=@( () => refreshRecords(currentPage))>
                @currentPage
            </button>
        }
        <button class="btn btn-custom" @onclick=@( ()=> NavigateToPage("next"))>Next</button>
    </div>
}



@code {
    private WeatherForecast[] forecasts;
    private string searchfilter = string.Empty;
    private List<WeatherForecast> filterdata;
    private bool isSortedAscending;
    private string activeSortColumn;
    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;
    

    void showSummary(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(Summary.id), id);
        modal.Show<Summary>("Summary", parameters);
    }

    private void SortTable(string ColumnName)
    {
        if (ColumnName != activeSortColumn)
        {
            filterdata = filterdata.OrderBy(x =>
        x.GetType().GetProperty(ColumnName).GetValue(x, null)).ToList();
            isSortedAscending = true;
            activeSortColumn = ColumnName;
        }
        else
        {
            if (isSortedAscending)
            {
                filterdata = filterdata.OrderByDescending(x =>
        x.GetType().GetProperty(ColumnName).GetValue(x, null)).ToList();
            }
            else
            {
                filterdata = filterdata.OrderBy(x =>
        x.GetType().GetProperty(ColumnName).GetValue(x, null)).ToList();
            }
            isSortedAscending = !isSortedAscending;
        }


    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        pagerSize = 4;
        pageSize = 5;
        curPage = 1;
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        this.filterdata = forecasts//.ToList();
           .Skip((curPage - 1) * pageSize).Take(pageSize).ToList();
        totalRecords =  forecasts.Count();
        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        SetPagerSize("forward");
    }



    private void Clear()
    {
        this.searchfilter = string.Empty;
        this.filterdata = forecasts//.ToList();
           .Skip((curPage - 1) * pageSize).Take(pageSize).ToList();
        //Console.WriteLine(filterdata);
    }

    private void Filter()
    {
        toastService.ShowSuccess("Filtering Stared");
        //this.filterdata = forecasts.Where(x => x.Summary.Contains(searchfilter) || x.Date.ToString().Contains(searchfilter)
        //  || x.TemperatureC.ToString().Contains(searchfilter) || x.TemperatureF.ToString().Contains(searchfilter)).ToList();
        this.filterdata = Array.FindAll(forecasts, element => element.Summary.ToLower().Contains(searchfilter.ToLower())
        || element.TemperatureF.ToString().ToLower().Contains(searchfilter.ToLower())
        || element.TemperatureC.ToString().ToLower().Contains(searchfilter.ToLower())
        || element.Date.ToString().ToLower().Contains(searchfilter.ToLower())).ToList();

    }

    public  void refreshRecords(int currentPage)
    {
        filterdata = forecasts.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
        curPage = currentPage;
        this.StateHasChanged();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
    }

    public void NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        refreshRecords(curPage);
    }



}
